stages:
  - build
  - test
  - deploy
  - run

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "$CI_REGISTRY_USER" "$CI_REGISTRY_PASS" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "$CI_PROJECT_DIR"
      --dockerfile "$CI_PROJECT_DIR/Dockerfile"
      --destination "$CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA"
  rules:
    - if: $CI_COMMIT_TAG != null

test:
  stage: test
  image: docker:dind
  script:
    - mkdir -p /root/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "$CI_REGISTRY_USER" "$CI_REGISTRY_PASS" | base64 | tr -d '\n')\"}}}" > /root/.docker/config.json
    - DOCKER_CID=$(docker run --rm -d -p 80:80 $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA)
    - echo $DOCKER_CID > /tmp/$CI_COMMIT_SHA.pid
    - echo Container $DOCKER_CID has started
    - DIND_IP=$(ip r | grep default | awk '{print $3}')
    - sleep 5
    - echo Trying to get http://$DIND_IP/hostname
    - wget  -qO - http://$DIND_IP/hostname
  after_script:
    - DOCKER_CID=$(cat /tmp/$CI_COMMIT_SHA.pid)
    - echo Remove container $DOCKER_CID
    - docker rm -f $DOCKER_CID
  rules:
    - if: $CI_COMMIT_TAG != null

deploy:
  stage: deploy
  image: docker:dind
  script:
    - mkdir -p /root/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "$CI_REGISTRY_USER" "$CI_REGISTRY_PASS" | base64 | tr -d '\n')\"}}}" > /root/.docker/config.json
    - docker tag $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_TAG
    - docker rmi $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_TAG
    - docker rmi $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHA
  rules:
    - if: $CI_COMMIT_TAG != null

run:
  stage: run
  image: docker:dind
  script:
    - export DOCKER_HOST=$SWARM_HOST
    - mkdir -p /root/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "$CI_REGISTRY_USER" "$CI_REGISTRY_PASS" | base64 | tr -d '\n')\"}}}" > /root/.docker/config.json
    - docker stack deploy --with-registry-auth --resolve-image always -c $CI_PROJECT_DIR/docker-compose.yml goapp_stack
  when: manual
  rules:
    - if: $CI_COMMIT_TAG != null
